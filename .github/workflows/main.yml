name: CI/CD Pipeline for Python

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.x'
  PATH_TO_LINT: 'src tests'
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  PROJECT_NAME: 'otus-source-code-lesson'
  PROD_VENV_NAME: '.venv'

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependecies
        run: |
          export PYTHONPATH=$(pwd)
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install -r requirements/requirements-lint.txt
          pip install -r requirements/requirements-test.txt
      - name: Run black
        run: black --check ${{ env.PATH_TO_LINT }}
      - name: Run isort
        run: isort --profile black --check ${{ env.PATH_TO_LINT }}
      - name: Run pylint
        run: pylint ${{ env.PATH_TO_LINT }}

  test:
    needs: lint
    name: Testing
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependecies
        run: |
          export PYTHONPATH=$(pwd)
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install -r requirements/requirements-test.txt
      - name: Run tests
        run: pytest --cov=src tests
  
  build:
    needs: test
    name: Build
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v2
      - name: Copy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_PRIVATE_KEY }}
          source: "requirements,src,config,models,data"
          target: ${{ env.PROJECT_NAME }}
      - name: Build prod environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ${{ env.PROJECT_NAME }} || true
            cd ${{ env.PROJECT_NAME }}

            # check venv and install
            if [[ ! -d ${{ env.PROD_VENV_NAME}} ]]; then
              python3 -m venv ${{ env.PROD_VENV_NAME}}
            fi

            # activate
            source "${{ env.PROD_VENV_NAME }}/bin/activate"

            # install dependencies
            pip install --upgrade pip
            pip install -r requirements/requirements.txt

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_PRIVATE_KEY }}
          script: |
            cd ${{ env.PROJECT_NAME }}
            export PYTHONPATH=$(pwd)
            source "${{ env.PROD_VENV_NAME }}/bin/activate"
            export STREAMLIT_PID=$(lsof -t -i:8501) || true
            kill $STREAMLIT_PID || true
            python3 src/train.py
            nohup streamlit run src/app.py --server.port 8501 > streamlit.log 2>&1 &